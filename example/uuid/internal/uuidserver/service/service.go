package service

import (
	"context"
	"fmt"
	"sync"

	"github.com/bwmarrin/snowflake"
	"github.com/google/uuid"
	"github.com/google/wire"
	"uuid/gen/api/go/uuid/v1"
)

var ProviderSet = wire.NewSet(
	NewUuidService,
	wire.Struct(new(Options), "*"),
	// grpc.ProviderSet,
)

// Options wireservice
type Options struct {
	// 没有依赖任何服务，这里就不存在client
	// UuidGrpc grpc.UuidInterface
	// ExampleMysql mysql.ExampleInterface
	// ExampleRedis redis.ExampleInterface
}

type Uuid struct {
	// snowflake Generated by default, nodeId cannot exceed 1023, and 0 ID is not used.
	// The uuid generator corresponding to the global node
	snowflakeRw  *sync.RWMutex
	snowflakeMap *snowflake.Node

	Options
}

// NewUuidService 创建uuid服务
func NewUuidService(options Options) *Uuid {
	return StdConfig(ModName).MustBuild()
}

func (u *Uuid) GetUuidBySnowflake(ctx context.Context, req *uuidv1.GetUuidBySnowflakeRequest) (*uuidv1.GetUuidBySnowflakeRequestResponse, error) {
	nodeId := req.GetNodeId()
	if req == nil || nodeId <= 0 || nodeId > 1023 {
		return nil, fmt.Errorf("the requested parameter is invalid")
	}

	u.snowflakeRw.RLock()
	// Generate a snowflake ID.
	id := u.snowflakeMap.Generate()
	u.snowflakeRw.RUnlock()

	return &uuidv1.GetUuidBySnowflakeRequestResponse{
		Uuid: id.String(),
	}, nil
}

func (u *Uuid) GetUuidByGoogleUUIDV4(ctx context.Context, req *uuidv1.GetUuidByGoogleUUIDV4Request) (*uuidv1.GetUuidByGoogleUUIDV4Response, error) {
	return &uuidv1.GetUuidByGoogleUUIDV4Response{Uuid: uuid.New().String()}, nil
}
