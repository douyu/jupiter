// Code generated by github.com/douyu/jupiter/cmd/protoc-gen-go-echo. DO NOT EDIT.
// versions:
// - protoc-gen-go-echo v0.0.1
// - protoc             (unknown)

package testproto

import (
	context "context"
	v4 "github.com/labstack/echo/v4"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the github.com/douyu/jupiter/cmd/protoc-gen-go-echo package it is being compiled against.
var _ = http.StatusOK
var _ = new(context.Context)
var _ = metadata.New
var _ = v4.DefaultBinder{}

type GreeterServiceEchoServer interface {

	// Sends a greeting
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterGreeterServiceEchoServer(r *v4.Echo, srv GreeterServiceEchoServer) {
	s := _echo_GreeterService{
		server: srv,
		router: r,
	}
	s.registerService()
}

type _echo_GreeterService struct {
	server GreeterServiceEchoServer
	router *v4.Echo
}

// Sends a greeting
func (s *_echo_GreeterService) _handler_SayHello_0(ctx v4.Context) error {
	var in SayHelloRequest
	if err := ctx.Bind(&in); err != nil {
		ctx.Error(err)
		return nil
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request().Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request().Context(), md)
	out, err := s.server.(GreeterServiceEchoServer).SayHello(newCtx, &in)
	if err != nil {
		ctx.Error(err)
		return nil
	}

	return ctx.JSON(http.StatusOK, out)
}

func (s *_echo_GreeterService) registerService() {

	// Sends a greeting
	s.router.Add("POST", "/v1/helloworld.Greeter/SayHello", s._handler_SayHello_0)

}
